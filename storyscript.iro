#################################################################
## Iro
################################################################ 
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate... 
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = Storyscript
file_extensions []     = story, storyscript;
textmate_uuid          = DB4E14AE-D10C-4B28-A55E-7C895B402701

################################################################
## Constants
################################################################

__TYPE \= (int|float|string|boolean|Map|List|object|regex|any|time)
__WORD \= [\w_]+

################################################################
## Styles
################################################################

styles [] {

.comment : style {
   color                 = #6a9955
   italic                = true
   ace_scope             = comment
   textmate_scope        = comment
   pygments_scope        = Comment
}

.keyvalue : style {
   color    = #9cdcfe
   ace_scope             = variable.parameter
   textmate_scope        = variable.parameter
   pygments_scope        = Name
}

.keytype : style {
   color                 = #9cdcfe
   ace_scope             = variable.parameter.function
   textmate_scope        = variable.parameter.function
   pygments_scope        = Name
}

.function : style {
   color                 = #569cd6
   ace_scope             = support.function
   textmate_scope        = support.function
   pygments_scope        = Keyword
}

.regexp : style {
   color                = #d16969
   italic               = true
   ace_scope            = source.regexp
   textmate_scope       = source.regexp
   pygments_scope       = String.Regex
}

.time : style {
   color                = #d16969
   ace_scope            = source.constant
   textmate_scope       = source.constant
   pygments_scope       = String.Other
}

.function_name : style {
   color                = #dcdcaa
   ace_scope             = entity.name.function
   textmate_scope        = entity.name.function
   pygments_scope        = Name.Function
}

.type : style {
   color                = #4ec9b0
   ace_scope            = support.type
   textmate_scope       = support.type
   pygments_scope       = Keyword.Type
}

.null : style {
   color                = #569cd6
   ace_scope            = support.constant
   textmate_scope       = support.constant
   pygments_scope       = Keyword.Constant
}

.slug : style {
   color                = cyan
   ace_scope            = variable.other
   textmate_scope       = variable.other
   pygments_scope       = Name.Variable
}

.brace : style {
   color                = white
   ace_scope            = punctuation.definition
   textmate_scope       = punctuation.definition
   pygments_scope       = Punctuation
}

.bracket : style {
   color                = white
   ace_scope            = punctuation.definition.array
   textmate_scope       = punctuation.definition.array
   pygments_scope       = Punctuation
}

.boolean : style {
   color                = #569cd6
   ace_scope            = constant.other
   textmate_scope       = constant.other
   pygments_scope       = Keyword.Constant
}

.keyword : style {
   color                = #c586c0
   ace_scope            = keyword.control.flow
   textmate_scope       = keyword.control.flow
   pygments_scope       = Keyword
}

.numeric : style {
   color                 = #b5cea8
   ace_scope             = constant.numeric
   textmate_scope        = constant.numeric
   pygments_scope        = Number
}

.string : style {
   color                 = #ce9178
   ace_scope             = storage.type.string
   textmate_scope        = storage.type.string
   pygments_scope        = String
}

.generic : style {
   color                 = white
   ace_scope             = meta.identifier
   textmate_scope        = meta.identifier
   pygments_scope        = Generic
}

.assignment : style {
   color                 = #999
   ace_scope             = keyword.operator.assignment
   textmate_scope        = keyword.operator.assignment
   pygments_scope        = Operator
}

.placeholder : style {
   color                 = #569cd6
   ace_scope             = string.punctuation
   textmate_scope        = string.punctuation
   pygments_scope        = String.Other
}

.comparison : style {
   color                 = #999
   ace_scope             = keyword.operator.comparison
   textmate_scope        = keyword.operator.comparison
   pygments_scope        = Operator
}

.arithmetic : style {
   color                 = #999
   ace_scope             = keyword.operator.arithmetic
   textmate_scope        = keyword.operator.arithmetic
   pygments_scope        = Operator
}

.punctuation : style {
   color                 = #999
   ace_scope             = constant.character.punctuation
   textmate_scope        = constant.character.punctuation
   pygments_scope        = Punctuation
}

.illegal : style {
   color                 = white
   background_color      = red
   ace_scope             = invalid
   textmate_scope        = invalid
   pygments_scope        = Generic.Error
}

}

#################################################
## Parse contexts
#################################################

contexts [] {

main : context {
   : include "multi_line_comment" ;
   : include "comment" ;
   : include "keyword" ;
   : include "assignment" ;
   : include "scope" ;
   : include "function" ;
   : include "something" ;
}

#################################################
## Includes
#################################################
variable : context {
   : pattern {
      regex          \= ($${__WORD})
      styles []       = .generic;
   }
}

varattr : context {
   : pattern {
      regex          \= (\.$${__WORD})
      styles []       = .generic;
   }
}


keyword : context {
   : pattern {
      regex          \= ((?!\W)(break|as|to|catch|throw|returns?|continue|is|not|else|finally|if|then|try|when|while|foreach|and|or)(\s|$))
      styles []       = .keyword;
   }
}

function : context {
   : inline_push {
      regex          \= ((?!\W)(function)(?=\s))
      styles []       = .function;
      default_style   = .function
      : pop {
         regex       \= ((?!function\s*)\w+)
         styles []    = .function_name;
      }
   }
}

comment : context {
   : pattern {
      regex          \= (#.*)
      styles []       = .comment;
   }
}

illegal : context {
   : pattern {
      regex          \= ([^\s])
      styles []       = .illegal;
   }
}

type : context {
   : pattern {
      regex          \= ((?!\W)$${__TYPE}((?=\W)|$))
      styles []       = .type;
   }
}

comparison : context {
   : pattern {
      regex          \= (<\=|>\=|\=\=|<|>|\!\=)
      styles []       = .comparison;
   }
}

arithmetic : context {
   : pattern {
      regex          \= (\!|\+|\-|\*|\*\*|/|//|%|<<|>>|&|\||\^|~|(?!^)@)
      styles []       = .arithmetic;
   }
}

assignment : context {
   : pattern {
      regex          \= (=)
      styles []       = .assignment;
   }
}

numeric : context {
   : pattern {
      regex          \= \b((0([box])[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?(e[+\-]?[0-9]+)?))\b
      styles []       = .numeric;
   }
}

placeholder : context {
   : pattern {
      regex          \= (\\{)
      styles []       = .string;
   }
   : inline_push {
      regex          \= (\{\s*)
      styles []       = .placeholder;
      : pop {
         regex       \= (\s*\})
         styles []    = .placeholder;
      }
      : include "something" ;
   }
}

string_single : context {
   : inline_push {
      regex          \= (\')
      styles []       = .string;
      : pop {
         regex       \= (\')
         styles []    = .string;
      }
      : include "string_inner" ;
   }
}

string_single_triple : context {
   : inline_push {
      regex          \= (\'{3})
      styles []       = .string;
      : pop {
         regex       \= (\'{3})
         styles []    = .string;
      }
      : include "string_inner" ;
   }
}

string_double : context {
   : inline_push {
      regex          \= (\")
      styles []       = .string;
      : pop {
         regex       \= (\")
         styles []    = .string;
      }
      : include "string_inner" ;
   }
}

string_double_triple : context {
   : inline_push {
      regex          \= (\"{3})
      styles []       = .string;
      : pop {
         regex       \= (\"{3})
         styles []    = .string;
      }
      : include "string_inner" ;
   }
}

string_inner : context {
   : include "placeholder" ;
   : pattern {
      regex          \= (.)
      styles []       = .string;
   }
}

null : context {
   : pattern {
      regex          \= (null)
      styles []      = .null;
   }
}

boolean : context {
   : pattern {
      regex          \= ((true|false)(?!(\s*\=|\w)))
      styles []      = .boolean;
   }
}

something : context {
   : include "numeric" ;
   : include "string_single_triple" ;
   : include "string_double_triple" ;
   : include "string_single" ;
   : include "string_double" ;
   : include "map" ;
   : include "type" ;
   : include "null" ;
   : include "list" ;
   : include "regexp" ;
   : include "boolean" ;
   : include "comment" ;
   : include "keyvalue" ;
   : include "slug" ;
   : include "time" ;
   : include "variable" ;
   : include "varattr" ;
   : include "scope" ;
   : include "comparison" ;
   : include "arithmetic" ;
   : include "illegal" ;
}

list : context {
   : inline_push {
      regex          \= (\[)
      styles []       = .bracket;
      : pop {
         regex       \= (\])
         styles []    = .bracket;
      }
      : include "comma" ;
      : include "something" ;
   }
}

scope : context {
   : inline_push {
      regex          \= (\()
      styles []       = .punctuation;
      : pop {
         regex       \= (\))
         styles []    = .punctuation;
      }
      : include "something" ;
   }
}

map : context {
   : inline_push {
      regex          \= (\{)
      styles []       = .brace;
      : pop {
         regex       \= (\})
         styles []    = .brace;
      }
      : include "comma" ;
      : include "colon" ;
      : include "something" ;
   }
}

comma : context {
   : pattern {
      regex       \= (\,)
      styles []    = .punctuation;
   }
}

colon : context {
   : pattern {
      regex       \= (\:)
      styles []    = .punctuation;
   }
}

slug : context {
   : pattern {
      regex          \= ([\w_]+[\w_-]*/[\w_]+[\w_-]*)
      styles []       = .slug;
   }
}

regexp : context {
   : pattern {
      regex          \= (\/(?![\s=/*+{}?])(\\.|.)*?/[igmy]{0,4}(?![a-zA-Z0-9]))
      styles []      = .regexp;
   }
}

time : context {
   : pattern {
      regex          \= ((\d+[smhdwqy])+)(?!(\s*\=|\w))
      styles []      = .time;
   }
}

keyvalue : context {
   description        = keyvalue
   : inline_push {
      regex          \= ($${__WORD}(?=\s*:))
      styles []       = .keyvalue;
      default_style   = .keyvalue
      : pop {
         regex       \= (:)
         styles []    = .punctuation;
      }
   }
}

keytype : context {
   description        = keytype
   : inline_push {
      regex          \= ((?=$${__WORD}\s*)$${__WORD}(?=\s*:\s*$${__TYPE}))
      styles []       = .keytype;
      : pop {
         regex       \= ((?!\s*:\s*$${__TYPE}))
         styles []    = .keytype;
      }
      : include "type" ;
      : pattern {
         regex       \= (:)
         styles []    = .punctuation;
      }
   }
}

multi_line_comment : context {
   description        = multiline
   : inline_push {
      regex          \= (###)
      styles []       = .comment;
      default_style   = .comment
      : pop {
         regex       \= (###[^\n]*)
         styles []    = .comment;
      }
   }
}
   
}
